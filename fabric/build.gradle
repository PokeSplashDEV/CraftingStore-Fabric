plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group


repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.craftingstore:core:2.9.1-RELEASE"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "me.lucko:fabric-permissions-api:0.2-SNAPSHOT"

    // include 'net.craftingstore:core:2.9.1-RELEASE'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    doFirst {
        println(">>> Project directory is: $projectDir")

        println(">>> Checking contents of libsSrc directory...")

        def libsSrcDir = file("$projectDir/libsSrc")
        if (libsSrcDir.exists()) {
            println(">>> libsSrc directory exists!")
            libsSrcDir.listFiles().each { println it }
        } else {
            println(">>> libsSrc directory NOT found!")
        }

        println(">>> End of check.")
    }
    from("$projectDir/libsSrc") {
        include '**/*'
    }
    from("$projectDir/LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}






publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
